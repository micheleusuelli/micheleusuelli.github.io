these_cols <- names(which_cluster[which_cluster == this_cluster])
df_cols <- data.frame(list_in[these_cols])
rowSums(df_cols) > 0
})
names(list_out) <- paste0("clust", var_clusters)
# for each movie, count the number of clusers having watched it
df_views <- data.frame(list_out)
list_out$n_views <- rowSums(df_views)
# add the movie ID
list_out$MovieId <- list_in$MovieId
list_out
}
rxDataStep(
inData = sql_movies,
outFile = sql_clust_users,
overwrite = TRUE,
transformFunc = clusterCols,
transformObjects = list(var_clusters = var_clusters,
which_cluster = which_cluster))
dim(sql_clust_users)
# cluster the movies ------------------------------------------------------
cols_km <- names(sql_clust_users)
feat_km <- paste(cols_km, collapse = " + ")
formula_km <- formula(paste("~", feat_km))
model_km <- rxKmeans(formula_km, sql_clust_users,
numClusters = 10)
cols_km <- names(sql_clust_users)
feat_km <- paste(cols_km, collapse = " + ")
formula_km <- formula(paste("~", feat_km))
model_km <- rxKmeans(formula_km, sql_clust_users,
numClusters = 20)
model_km$centers
qplot(unlist(model_km$centers))
# define the packages
packages_to_load <- c(
"scales",
"R6",
"AUC",
"rpart",
"rpart.plot",
"randomForest",
"nnet",
"data.table",
"dplyr",
"tidyr",
"ggplot2")
# install the missing packages
packages_to_install <- setdiff(packages_to_load, rownames(installed.packages()))
for(package in packages_to_install) {
install.packages(package)
}
qplot(unlist(model_km$centers))
ggplot2::qplot(unlist(model_km$centers))
quantile(unlist(model_km$centers))
ggplot2::qplot(unlist(model_km$centers))
unlist(model_km$centers))
unlist(model_km$centers)
quantile(unlist(model_km$centers))
table(model_km$centers > 0.01)
table(model_km$centers > 0.1)
df_movies <- model_km$centers > 0.1
View(df_movies)
df_movies <- model_km$centers[, -1] > 0.1
View(df_movies)
df_movies <- as.numeric(model_km$centers[, -1] > 0.1)
View(df_movies)
df_movies <- model_km$centers[, -1] > 0.1 + 0
View(df_movies)
df_movies <- model_km$centers[, -1] > 0.1 + 0.
View(df_movies)
df_movies <- model_km$centers[, -1] > 0.1 + 0.2
View(df_movies)
df_movies <- model_km$centers[, -1] > 0.1 + 03
df_movies <- model_km$centers[, -1] > 0.1 + 3
View(df_movies)
df_movies <- model_km$centers[, -1] > 0.1
class(df_movies)
class(df_movies[1,1])
as.numeric(df_movies)
class(as.numeric(df_movies))
df_movies <- ifelse(model_km$centers[, -1] > 0.1, 1, 0)
View(df_movies)
df_movies[1:10, 1:6]
n_clusters <- ncol(df_movies)
cluster_train <- sample(names(df_movies), n_clusters * 0.8)
cluster_test <- setdiff(names(df_movies), cluster_train)
n_clusters <- ncol(df_movies)
cluster_train <- sample(names(df_movies), n_clusters * 0.8)
names(df_movies)
df_movies <- data.frame(ifelse(model_km$centers[, -1] > 0.1, 1, 0))
n_clusters <- ncol(df_movies)
n_clusters
cluster_train <- sample(names(df_movies), n_clusters * 0.8)
cluster_test <- setdiff(names(df_movies), cluster_train)
recc_data_train <- df_movies %>%
dplyr::select(one_of(cluster_train)) %>%
t() %>%
as("realRatingMatrix")
recc_data_test <- df_movies %>%
dplyr::select(one_of(cluster_test)) %>%
t() %>%
as("realRatingMatrix")
library(magrittr)
recc_data_train <- df_movies %>%
dplyr::select(one_of(cluster_train)) %>%
t() %>%
as("realRatingMatrix")
recc_data_test <- df_movies %>%
dplyr::select(one_of(cluster_test)) %>%
t() %>%
as("realRatingMatrix")
recc_data_train <- df_movies %>%
dplyr::select(one_of(cluster_train)) %>%
t() %>%
as("realRatingMatrix")
cluster_train <- sample(colnames(df_movies), n_clusters * 0.8)
cluster_test <- setdiff(colnames(df_movies), cluster_train)
recc_data_train <- df_movies %>%
dplyr::select(one_of(cluster_train)) %>%
t() %>%
as("realRatingMatrix")
df_movies %>%
dplyr::select(one_of(cluster_train))
cluster_train
recc_data_train <- df_movies[, cluster_train] %>%
t() %>%
as("realRatingMatrix")
install.packages("recommenderlab")
library(recommenderlab)
recc_data_train <- df_movies[, cluster_train] %>%
t() %>%
as("realRatingMatrix")
recc_data_test <- df_movies[, cluster_test] %>%
t() %>%
as("realRatingMatrix")
# build-model -------------------------------------------------------------
recc_model <- recommenderlab::Recommender(
data = recc_data_train,
method = "IBCF",
parameter = list(k = 30))
n_items_top <- 20
image(model_details$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
image(recc_model$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
## ------------------------------------------------------------------------
list_recc <- lapply(recc_predicted@items, function(x){
colnames(recc_data_train)[x]
})
list_recc
list_recc <- lapply(recc_model@items, function(x){
colnames(recc_data_train)[x]
})
list_recc
recc_model <- recommenderlab::Recommender(
data = recc_data_train,
method = "IBCF",
parameter = list(k = 30))
image(recc_model@model$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
list_recc <- lapply(recc_model@model@items, function(x){
colnames(recc_data_train)[x]
})
list_recc <- lapply(recc_model@model$items, function(x){
colnames(recc_data_train)[x]
})
list_recc
rm(list = ls())
library(recommenderlab)
# define-data -------------------------------------------------------------
connection_string <- "Driver=SQL Server;Server=.;Database=movies;Uid=usernam;password"
sql_movies <- RxSqlServerData(connectionString = connection_string,
table = "movies")
sql_clust_users <- RxSqlServerData(connectionString = connection_string,
table = "sql_clust_users")
# rxDataStep("sql_ratings.xdf", "sql_movies.xdf", overwrite = TRUE,
#            transformFunc = function(list_in) {
#              list_in[-1] <- lapply(list_in[-1], function(x) as.numeric(x > 0))
#              list_in
#              # browser()
#            })
sql_movies <- RxXdfData("sql_movies.xdf")
sql_clust_users <- RxXdfData("sql_clust_users.xdf")
# View(head(sql_movies))
# cluster the users -------------------------------------------------------
# define the formula
cols_movies <- names(sql_movies)[-1]
string_users <- paste(cols_movies, collapse = " + ")
formula_users <- formula(paste("~", string_users))
# build the hierachical clustering model
cor_users <- rxCor(formula_users, sql_movies,
rowsPerRead = 5e02)
dist_users <- as.dist(1 - abs(cor_users))
model_hc <- hclust(dist_users, method = "complete")
which_cluster <- cutree(model_hc, k = 100)
var_clusters <- sort(unique(which_cluster))
# group the users into clusters
clusterCols <- function(list_in) {
# define a field for each cluster
list_out <- lapply(var_clusters, function(this_cluster) {
these_cols <- names(which_cluster[which_cluster == this_cluster])
df_cols <- data.frame(list_in[these_cols])
rowSums(df_cols) > 0
})
names(list_out) <- paste0("clust", var_clusters)
# for each movie, count the number of clusers having watched it
df_views <- data.frame(list_out)
list_out$n_views <- rowSums(df_views)
# add the movie ID
list_out$MovieId <- list_in$MovieId
list_out
}
rxDataStep(
inData = sql_movies,
outFile = sql_clust_users,
overwrite = TRUE,
transformFunc = clusterCols,
transformObjects = list(var_clusters = var_clusters,
which_cluster = which_cluster))
dim(sql_clust_users)
# cluster the movies ------------------------------------------------------
cols_km <- names(sql_clust_users)
feat_km <- paste(cols_km, collapse = " + ")
formula_km <- formula(paste("~", feat_km))
model_km <- rxKmeans(formula_km, sql_clust_users,
numClusters = 20)
model_km$centers
df_movies <- ifelse(model_km$centers[, -1] > 0.1, 1, 0)
df_movies[1:10, 1:6]
# split-data --------------------------------------------------------------
n_clusters <- ncol(df_movies)
cluster_train <- sample(colnames(df_movies), n_clusters * 0.8)
cluster_test <- setdiff(colnames(df_movies), cluster_train)
recc_data_train <- df_movies[, cluster_train] %>%
t() %>%
as("realRatingMatrix")
recc_data_test <- df_movies[, cluster_test] %>%
t() %>%
as("realRatingMatrix")
df_movies[1:10, 1:6]
list_recc <- lapply(recc_model@model$items, function(x){
colnames(recc_data_train)[x]
})
source('~/1_docs_microsoft/3_docs_projects/3_docs_articles/recommender_systems/2-cluster-recommend.R', echo=TRUE)
recc_model <- recommenderlab::Recommender(
data = recc_data_train,
method = "IBCF",
parameter = list(k = 30))
n_items_top <- 20
image(recc_model@model$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
rm(list = ls())
library(recommenderlab)
# define-data -------------------------------------------------------------
connection_string <- "Driver=SQL Server;Server=.;Database=movies;Uid=usernam;password"
sql_movies <- RxSqlServerData(connectionString = connection_string,
table = "movies")
sql_clust_users <- RxSqlServerData(connectionString = connection_string,
table = "sql_clust_users")
# rxDataStep("sql_ratings.xdf", "sql_movies.xdf", overwrite = TRUE,
#            transformFunc = function(list_in) {
#              list_in[-1] <- lapply(list_in[-1], function(x) as.numeric(x > 0))
#              list_in
#              # browser()
#            })
sql_movies <- RxXdfData("sql_movies.xdf")
sql_clust_users <- RxXdfData("sql_clust_users.xdf")
# View(head(sql_movies))
# cluster the users -------------------------------------------------------
# define the formula
cols_movies <- names(sql_movies)[-1]
string_users <- paste(cols_movies, collapse = " + ")
formula_users <- formula(paste("~", string_users))
# build the hierachical clustering model
cor_users <- rxCor(formula_users, sql_movies,
rowsPerRead = 5e02)
dist_users <- as.dist(1 - abs(cor_users))
model_hc <- hclust(dist_users, method = "complete")
which_cluster <- cutree(model_hc, k = 100)
var_clusters <- sort(unique(which_cluster))
# group the users into clusters
clusterCols <- function(list_in) {
# define a field for each cluster
list_out <- lapply(var_clusters, function(this_cluster) {
these_cols <- names(which_cluster[which_cluster == this_cluster])
df_cols <- data.frame(list_in[these_cols])
rowSums(df_cols) > 0
})
names(list_out) <- paste0("clust", var_clusters)
# for each movie, count the number of clusers having watched it
df_views <- data.frame(list_out)
list_out$n_views <- rowSums(df_views)
# add the movie ID
list_out$MovieId <- list_in$MovieId
list_out
}
rxDataStep(
inData = sql_movies,
outFile = sql_clust_users,
overwrite = TRUE,
transformFunc = clusterCols,
transformObjects = list(var_clusters = var_clusters,
which_cluster = which_cluster))
dim(sql_clust_users)
# cluster the movies ------------------------------------------------------
cols_km <- names(sql_clust_users)
feat_km <- paste(cols_km, collapse = " + ")
formula_km <- formula(paste("~", feat_km))
model_km <- rxKmeans(formula_km, sql_clust_users,
numClusters = 20)
model_km$centers
df_movies <- ifelse(model_km$centers[, -1] > 0.1, 1, 0)
df_movies[1:10, 1:6]
# split-data --------------------------------------------------------------
n_clusters <- ncol(df_movies)
cluster_train <- sample(colnames(df_movies), n_clusters * 0.8)
cluster_test <- setdiff(colnames(df_movies), cluster_train)
recc_data_train <- df_movies[, cluster_train] %>%
t() %>%
as("realRatingMatrix")
recc_data_test <- df_movies[, cluster_test] %>%
t() %>%
as("realRatingMatrix")
library(magrittr)
rm(list = ls())
library(recommenderlab)
# define-data -------------------------------------------------------------
connection_string <- "Driver=SQL Server;Server=.;Database=movies;Uid=usernam;password"
sql_movies <- RxSqlServerData(connectionString = connection_string,
table = "movies")
sql_clust_users <- RxSqlServerData(connectionString = connection_string,
table = "sql_clust_users")
# rxDataStep("sql_ratings.xdf", "sql_movies.xdf", overwrite = TRUE,
#            transformFunc = function(list_in) {
#              list_in[-1] <- lapply(list_in[-1], function(x) as.numeric(x > 0))
#              list_in
#              # browser()
#            })
sql_movies <- RxXdfData("sql_movies.xdf")
sql_clust_users <- RxXdfData("sql_clust_users.xdf")
# View(head(sql_movies))
# cluster the users -------------------------------------------------------
# define the formula
cols_movies <- names(sql_movies)[-1]
string_users <- paste(cols_movies, collapse = " + ")
formula_users <- formula(paste("~", string_users))
# build the hierachical clustering model
cor_users <- rxCor(formula_users, sql_movies,
rowsPerRead = 5e02)
dist_users <- as.dist(1 - abs(cor_users))
model_hc <- hclust(dist_users, method = "complete")
which_cluster <- cutree(model_hc, k = 100)
var_clusters <- sort(unique(which_cluster))
# group the users into clusters
clusterCols <- function(list_in) {
# define a field for each cluster
list_out <- lapply(var_clusters, function(this_cluster) {
these_cols <- names(which_cluster[which_cluster == this_cluster])
df_cols <- data.frame(list_in[these_cols])
rowSums(df_cols) > 0
})
names(list_out) <- paste0("clust", var_clusters)
# for each movie, count the number of clusers having watched it
df_views <- data.frame(list_out)
list_out$n_views <- rowSums(df_views)
# add the movie ID
list_out$MovieId <- list_in$MovieId
list_out
}
rxDataStep(
inData = sql_movies,
outFile = sql_clust_users,
overwrite = TRUE,
transformFunc = clusterCols,
transformObjects = list(var_clusters = var_clusters,
which_cluster = which_cluster))
dim(sql_clust_users)
# cluster the movies ------------------------------------------------------
cols_km <- names(sql_clust_users)
feat_km <- paste(cols_km, collapse = " + ")
formula_km <- formula(paste("~", feat_km))
model_km <- rxKmeans(formula_km, sql_clust_users,
numClusters = 20)
model_km$centers
df_movies <- ifelse(model_km$centers[, -1] > 0.1, 1, 0)
df_movies[1:10, 1:6]
# split-data --------------------------------------------------------------
n_clusters <- ncol(df_movies)
cluster_train <- sample(colnames(df_movies), n_clusters * 0.8)
cluster_test <- setdiff(colnames(df_movies), cluster_train)
recc_data_train <- df_movies[, cluster_train] %>%
t() %>%
as("realRatingMatrix")
recc_data_test <- df_movies[, cluster_test] %>%
t() %>%
as("realRatingMatrix")
# build-model -------------------------------------------------------------
recc_model <- recommenderlab::Recommender(
data = recc_data_train,
method = "IBCF",
parameter = list(k = 30))
n_items_top <- 20
image(recc_model@model$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
recc_model
image(recc_model@model$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
## ------------------------------------------------------------------------
list_recc <- lapply(recc_model@model$items, function(x){
colnames(recc_data_train)[x]
})
list_recc
## ------------------------------------------------------------------------
list_recc <- lapply(recc_model@model$items, function(x){
colnames(recc_data_train)[x]
})
list_recc
## ------------------------------------------------------------------------
list_recc <- lapply(recc_model@model$items, function(x){
colnames(recc_data_train)[x]
})
list_recc
recc_data_train
colnames(recc_data_train)
list_recc <- lapply(recc_model@model$items, function(x){
})
list_recc
recc_model@model$minRating
recc_model@predict(recc_data_train)
recc_model@predict(recc_model, recc_data_train)
recc_model@predict(newdata = recc_data_train)
recc_model@model$sim
image(recc_model@model$sim,
main = "Heatmap of the first rows and columns")
recc_model <- recommenderlab::Recommender(
data = df_movies,
method = "IBCF",
parameter = list(k = 30))
as(df_movies, "realRatingMatrix")
rrm_movies <- as(df_movies, "realRatingMatrix")
recc_model <- recommenderlab::Recommender(
data = rrm_movies,
method = "IBCF",
parameter = list(k = 30))
plot(recc_model)
recc_model
image(recc_model@model$sim,
main = "Heatmap of the first rows and columns")
recc_model@model$sim
dim(recc_model@model$sim)
image(recc_model@model$sim,
main = "Heatmap of the first rows and columns")
image(recc_model@model$sim[1:10, 1:10],
main = "Heatmap of the first rows and columns")
str(getModel(rec))
recommenderRegistry$get_entry_names()
Sys.which("pdflatex")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
sql_movies <- RxXdfData("sql_movies.xdf")
sql_clust_users <- RxXdfData("sql_clust_users.xdf")
# Chunk 4
dim(sql_movies)
rxGetVarInfo(sql_movies)[1:4]
head(sql_movies)[, 1:8]
# Chunk 5
# define the formula
cols_movies <- names(sql_movies)[-1]
string_users <- paste(cols_movies, collapse = " + ")
formula_users <- formula(paste("~", string_users))
# build the hierachical clustering model
cor_users <- rxCor(formula_users, sql_movies,
rowsPerRead = 5e02)
dist_users <- as.dist(1 - abs(cor_users))
model_hc <- hclust(dist_users, method = "complete")
which_cluster <- cutree(model_hc, k = 100)
var_clusters <- sort(unique(which_cluster))
# group the users into clusters
clusterCols <- function(list_in) {
# define a field for each cluster
list_out <- lapply(var_clusters, function(this_cluster) {
these_cols <- names(which_cluster[which_cluster == this_cluster])
df_cols <- data.frame(list_in[these_cols])
rowSums(df_cols) > 0
})
names(list_out) <- paste0("clust", var_clusters)
# for each movie, count the number of clusers having watched it
df_views <- data.frame(list_out)
list_out$n_views <- rowSums(df_views)
# add the movie ID
list_out$MovieId <- list_in$MovieId
list_out
}
rxDataStep(
inData = sql_movies,
outFile = sql_clust_users,
overwrite = TRUE,
transformFunc = clusterCols,
transformObjects = list(var_clusters = var_clusters,
which_cluster = which_cluster))
dim(sql_clust_users)
# Chunk 6
cols_km <- names(sql_clust_users)
feat_km <- paste(cols_km, collapse = " + ")
formula_km <- formula(paste("~", feat_km))
model_km <- rxKmeans(formula_km, sql_clust_users,
numClusters = 20,
reportProgress = 0)
df_movies <- ifelse(model_km$centers[, -1] > 0.1, 1, 0)
df_movies[1:10, 1:6]
cols_km
