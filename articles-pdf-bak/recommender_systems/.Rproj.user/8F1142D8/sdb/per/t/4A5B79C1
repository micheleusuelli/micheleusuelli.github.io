{
    "collab_server" : "",
    "contents" : "\n\nrm(list = ls())\n\nlibrary(recommenderlab)\n\n# define-data -------------------------------------------------------------\n\nconnection_string <- \"Driver=SQL Server;Server=.;Database=movies;Uid=usernam;password\"\nsql_movies <- RxSqlServerData(connectionString = connection_string,\n                              table = \"movies\")\nsql_clust_users <- RxSqlServerData(connectionString = connection_string,\n                              table = \"sql_clust_users\")\n\n\n# rxDataStep(\"sql_ratings.xdf\", \"sql_movies.xdf\", overwrite = TRUE,\n#            transformFunc = function(list_in) {\n#              list_in[-1] <- lapply(list_in[-1], function(x) as.numeric(x > 0))\n#              list_in\n#              # browser()\n#            })\nsql_movies <- RxXdfData(\"sql_movies.xdf\")\nsql_clust_users <- RxXdfData(\"sql_clust_users.xdf\")\n# View(head(sql_movies))\n\n\n\n# cluster the users -------------------------------------------------------\n\n# define the formula\ncols_movies <- names(sql_movies)[-1]\nstring_users <- paste(cols_movies, collapse = \" + \")\nformula_users <- formula(paste(\"~\", string_users))\n\n# build the hierachical clustering model\ncor_users <- rxCor(formula_users, sql_movies,\n                   rowsPerRead = 5e02)\ndist_users <- as.dist(1 - abs(cor_users))\nmodel_hc <- hclust(dist_users, method = \"complete\")\nwhich_cluster <- cutree(model_hc, k = 100)\nvar_clusters <- sort(unique(which_cluster))\n\n# group the users into clusters\nclusterCols <- function(list_in) {\n  \n  # define a field for each cluster\n  list_out <- lapply(var_clusters, function(this_cluster) {\n    these_cols <- names(which_cluster[which_cluster == this_cluster])\n    df_cols <- data.frame(list_in[these_cols])\n    rowSums(df_cols) > 0\n  })\n  \n  names(list_out) <- paste0(\"clust\", var_clusters)\n  # for each movie, count the number of clusers having watched it\n  df_views <- data.frame(list_out)\n  list_out$n_views <- rowSums(df_views)\n  \n  # add the movie ID\n  list_out$MovieId <- list_in$MovieId\n  \n  list_out\n}\n\nrxDataStep(\n  inData = sql_movies,\n  outFile = sql_clust_users,\n  overwrite = TRUE,\n  transformFunc = clusterCols,\n  transformObjects = list(var_clusters = var_clusters,\n                          which_cluster = which_cluster))\n\ndim(sql_clust_users)\n\n\n\n# cluster the movies ------------------------------------------------------\n\ncols_km <- names(sql_clust_users)\nfeat_km <- paste(cols_km, collapse = \" + \")\nformula_km <- formula(paste(\"~\", feat_km))\nmodel_km <- rxKmeans(formula_km, sql_clust_users,\n                     numClusters = 20)\nmodel_km$centers\ndf_movies <- ifelse(model_km$centers[, -1] > 0.1, 1, 0)\ndf_movies[1:10, 1:6]\n\n\n\n\n# # split-data --------------------------------------------------------------\n# \n# n_clusters <- ncol(df_movies)\n# cluster_train <- sample(colnames(df_movies), n_clusters * 0.8)\n# cluster_test <- setdiff(colnames(df_movies), cluster_train)\n# \n# recc_data_train <- df_movies[, cluster_train] %>%\n#   t() %>%\n#   as(\"realRatingMatrix\")\n# \n# recc_data_test <- df_movies[, cluster_test] %>%\n#   t() %>%\n#   as(\"realRatingMatrix\")\n\n\n\n# build-model -------------------------------------------------------------\n\nrrm_movies <- as(df_movies, \"realRatingMatrix\")\n\nrecc_model <- recommenderlab::Recommender(\n  data = rrm_movies,\n  method = \"IBCF\",\n  parameter = list(k = 30))\n\nimage(recc_model@model$sim[1:10, 1:10],\n      main = \"Heatmap of the first rows and columns\")\n\n\n\n## ------------------------------------------------------------------------\nlist_recc <- lapply(recc_model@model$items, function(x){\n  colnames(recc_data_train)[x]\n})\nlist_recc\n\n\n",
    "created" : 1469198830378.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1980692554",
    "id" : "4A5B79C1",
    "lastKnownWriteTime" : 1469384740,
    "last_content_update" : 1469384740970,
    "path" : "~/1_docs_microsoft/3_docs_projects/3_docs_articles/recommender_systems/2-cluster-recommend.R",
    "project_path" : "2-cluster-recommend.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}